version: '3.12'



services:


  hw_drf:
    build: .
    command:
      - /bin/sh
      - -c
      - |
        python manage.py collectstatic --noinput
        python manage.py migrate
        python manage.py createadmin
        gunicorn HW_skypro_Django_REST_Framework.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - db
    env_file:
      - .env

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
    depends_on:
      - hw_drf

  db:
    image: postgres:17
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:latest
    volumes:
      - .:/app
      - redis_data:/app/data/redis
    env_file:
      - ./.env
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 30s
      timeout: 10s

  celery:
    build: .
    command:
      - /bin/sh
      - -c
      - |
        celery -A HW_skypro_Django_REST_Framework.celery worker --loglevel=info --pool=solo
        docker-compose exec celery python manage.py shell -c "from users.tasks import test_task; test_task.delay(2, 3)"
    volumes:
      - .:/app
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - hw_drf
      - nginx

  celery_beat:
    build: .
    command: >
      bash -c "celery -A HW_skypro_Django_REST_Framework beat --loglevel=info"
    volumes:
      - .:/app
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - celery
      - hw_drf
      - nginx


volumes:
  db_data:
  static_volume:
  media_volume:
  redis_data:

